
#define AI_ASPECT_KEY NAME TYPE
	{SIMPLE_KEY {NAME} {TYPE}}
	[tag]
		name={NAME}
		{SIMPLE_KEY value {TYPE}}
		{SIMPLE_KEY id string}
		{SIMPLE_KEY engine string}
		{AI_ASPECT_FILTERS}
		{AI_ASPECT_INVALIDATE}
	[/tag]
#enddef

#define AI_ASPECT_TAG NAME CONTENTS
	[tag]
		name={NAME}
		[if]
			[value]
			[/value]
			[then]
				{SIMPLE_KEY id string}
				{SIMPLE_KEY engine string}
				{AI_ASPECT_FILTERS}
				{AI_ASPECT_INVALIDATE}
				[tag]
					name="value"
					{CONTENTS}
				[/tag]
			[/then]
			[else]
				{CONTENTS}
			[/else]
		[/if]
	[/tag]
#enddef

# Filter keys for simple aspects
{AI_ASPECT_FILTERS}
{SIMPLE_KEY engine string}
# Simple scalar aspects
{AI_ASPECT_KEY aggression real}
{AI_ASPECT_KEY caution real}
{AI_ASPECT_KEY grouping ai_grouping}
{AI_ASPECT_KEY leader_aggression real}
{AI_ASPECT_KEY leader_ignores_keep bool}
{AI_ASPECT_KEY leader_value real}
{AI_ASPECT_KEY passive_leader bool}
{AI_ASPECT_KEY passive_leader_shares_keep bool}
{AI_ASPECT_KEY recruitment_diversity real}
{AI_ASPECT_KEY recruitment_randomness int}
{AI_ASPECT_KEY scout_village_targeting real}
{AI_ASPECT_KEY simple_targeting bool}
{AI_ASPECT_KEY support_villages bool}
{AI_ASPECT_KEY village_value real}
{AI_ASPECT_KEY villages_per_scout int}
{AI_ASPECT_KEY attack_depth int}
{AI_ASPECT_KEY advancements string_list}
{AI_ASPECT_KEY recruitment_more string_list}
{AI_ASPECT_KEY recruitment_pattern string_list}

# Simple non-scalar aspects
{AI_ASPECT_TAG leader_goal super="$ai/standard_aspect~leader_goal/value"}
{AI_ASPECT_TAG recruitment_instructions super="$ai/standard_aspect~recruitment_instructions/value"}
{AI_ASPECT_TAG recruitment_save_gold super="$ai/standard_aspect~recruitment_save_gold/value"}
{AI_ASPECT_TAG avoid super="$ai/standard_aspect~avoid/value"}

# Attacks is nice in that it doesn't have the doubly-simplified form!
[tag]
	name="attacks"
	super="$ai/standard_aspect~attacks"
[/tag]
